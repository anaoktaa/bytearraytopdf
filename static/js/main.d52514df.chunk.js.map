{"version":3,"sources":["App.js","utils.js","serviceWorker.js","index.js"],"names":["App","useState","byteArr","setByteArr","className","onClick","copyText","document","getElementById","select","setSelectionRange","execCommand","alert","id","name","value","placeholder","onChange","event","target","data","trim","replace","response","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","blob","Blob","type","b64toBlob","blobUrl","URL","createObjectURL","window","open","openNewTab","arrayBuffer","chunk","base64","encodings","bytes","byteLength","byteRemainder","mainLength","base64ArrayBuffer","JSON","parse","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QA2GeA,MArGf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACLC,EADK,KACIC,EADJ,KAmEb,OACE,yBAAKC,UAAU,OACb,2DACA,kWAMA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gBACb,2CACA,yBAAKA,UAAU,cACb,uBAAGC,QA5BM,WAEjB,IAAIC,EAAWC,SAASC,eAAe,iBAGvCF,EAASG,SACTH,EAASI,kBAAkB,EAAG,OAG9BH,SAASI,YAAY,QAGrBC,MAAM,eAgBE,QACA,uBAAGP,QAjCO,WAClBF,EAAW,MAgCH,WAGJ,8BACEU,GAAG,gBACHT,UAAU,YACVU,KAAK,OACLC,MAAOb,EACPc,YAAY,mDACZC,SA5Da,SAAAC,GAAU,IACrBH,EAAUG,EAAMC,OAAhBJ,MACRZ,EAAWY,OA6DT,6BACA,4BAAQV,QA3DU,WACpB,GAAgB,KAAZH,EACFU,MAAM,iCAEH,CACH,IAAIQ,EAAOlB,EAAQmB,OAAOC,QAAQ,KAAK,IACvCF,EAAKE,QAAQ,YAAa,IAtCX,SAACC,GAOlB,IANA,IAGIC,EAAiBC,KAAKF,GACtBG,EAAa,GAERC,EAAS,EAAGA,EAASH,EAAeI,OAAQD,GALrC,IAK0D,CAIxE,IAHA,IAAIE,EAAQL,EAAeK,MAAMF,EAAQA,EAN3B,KAQVG,EAAc,IAAIC,MAAMF,EAAMD,QACzBI,EAAI,EAAGA,EAAIH,EAAMD,OAAQI,IAChCF,EAAYE,GAAKH,EAAMI,WAAWD,GAGpC,IAAIE,EAAY,IAAIC,WAAWL,GAE/BJ,EAAWU,KAAKF,GAGlB,IAAIG,EAAO,IAAIC,KAAKZ,EAAY,CAACa,KAnBf,oBAoBlBF,EAAOG,IAAUjB,EApBC,mBAqBlB,IAAIkB,EAAUC,IAAIC,gBAAgBN,GAElCO,OAAOC,KAAKJ,GAiBVK,CClD2B,SAACC,GAa9B,IAZA,IASIC,EATAC,EAAY,GACZC,EAAY,mEAEZC,EAAgB,IAAIhB,WAAWY,GAC/BK,EAAgBD,EAAMC,WACtBC,EAAgBD,EAAa,EAC7BE,EAAgBF,EAAaC,EAMxBrB,EAAI,EAAGA,EAAIsB,EAAYtB,GAAQ,EAWtCiB,GAAUC,GANG,UAHbF,EAASG,EAAMnB,IAAM,GAAOmB,EAAMnB,EAAI,IAAM,EAAKmB,EAAMnB,EAAI,MAGjC,IAMDkB,GALZ,OAARF,IAAqB,IAKcE,GAJ3B,KAARF,IAAsB,GAI4BE,EAH3C,GAARF,GA4BN,OArBsB,IAAlBK,EAQFJ,GAAUC,GALG,KAFbF,EAAQG,EAAMG,MAEO,GAKIJ,GAFZ,EAARF,IAAgB,GAEmB,KACb,IAAlBK,IASTJ,GAAUC,GANG,OAFbF,EAASG,EAAMG,IAAe,EAAKH,EAAMG,EAAa,MAE/B,IAMEJ,GALZ,KAARF,IAAmB,GAKgBE,GAF3B,GAARF,IAAmB,GAE+B,KAGlDC,EDAUM,CADDC,KAAKC,MAAM,IAAIrC,EAAK,UAoDlC,+BExFcsC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzD,SAASC,eAAe,SDyHpB,kBAAmByD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d52514df.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport b64toBlob from 'b64-to-blob';\nimport './App.css';\n\nimport { base64ArrayBuffer } from './utils';\n\nfunction App() {\n  const [ byteArr, setByteArr ] = useState(\"\");\n\n  const openNewTab = (response) => {\n    var contentType = 'application/pdf';\n    var sliceSize = 512;\n\n    var byteCharacters = atob(response);\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n      var byteNumbers = new Array(slice.length);\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      var byteArray = new Uint8Array(byteNumbers);\n\n      byteArrays.push(byteArray);\n    }\n\n    var blob = new Blob(byteArrays, {type: contentType});\n    blob = b64toBlob(response, contentType);\n    var blobUrl = URL.createObjectURL(blob);\n\n    window.open(blobUrl);\n  }\n\n  const handleChange = event => {\n    const { value } = event.target;\n    setByteArr(value);\n  }\n\n  const handleConvert = () => {\n    if (byteArr === \"\") {\n      alert(\"Input must not be empty !\");\n    }\n    else {\n      let data = byteArr.trim().replace(/ /g,'');\n      data.replace(/\\r?\\n|\\r/g, '');\n      let arrData = JSON.parse(\"[\"+data+\"]\");\n      const base64 = base64ArrayBuffer(arrData);\n      openNewTab(base64);\n    }\n  }\n\n  const handleClear = () => {\n    setByteArr(\"\");\n  }\n\n  const handleCopy = () => {\n      /* Get the text field */\n    var copyText = document.getElementById(\"byte-arr-area\");\n\n    /* Select the text field */\n    copyText.select();\n    copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n    /* Copy the text inside the text field */\n    document.execCommand(\"copy\");\n\n    /* Alert the copied text */\n    alert(\"Copied ! \");\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Byte Array to PDF Converter</h1>\n      <p>\n        Convert Byte Array to PDF online using a free decoding tool which allows you to \n        decode Byte Array as PDF and display it directly in the browser.\n        In addition, you will receive some basic information about this PDF (MIME type, extension, size).\n        And, of course, you will have a special link to download the PDF to your device. \n      </p>\n      <div className=\"box\">\n        <div className=\"flex-between\"> \n          <h3>Byte Array*</h3>\n          <div className=\"flex-start\">\n            <p onClick={handleCopy}>Copy</p>\n            <p onClick={handleClear}>Clear</p>\n          </div>\n        </div>\n        <textarea  \n          id=\"byte-arr-area\"\n          className=\"text-area\" \n          name=\"data\" \n          value={byteArr}\n          placeholder=\"Example : 37, 80, 68, 70, 45, 49, 46, 52, 10, 37\"\n          onChange={handleChange}\n        />\n      </div>\n      <br/>\n      <button onClick={handleConvert}>\n        Convert Byte Array to PDF\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","export const base64ArrayBuffer = (arrayBuffer) => {\r\n    var base64    = ''\r\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\n  \r\n    var bytes         = new Uint8Array(arrayBuffer)\r\n    var byteLength    = bytes.byteLength\r\n    var byteRemainder = byteLength % 3\r\n    var mainLength    = byteLength - byteRemainder\r\n  \r\n    var a, b, c, d\r\n    var chunk\r\n  \r\n    // Main loop deals with bytes in chunks of 3\r\n    for (var i = 0; i < mainLength; i = i + 3) {\r\n      // Combine the three bytes into a single integer\r\n      chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\r\n  \r\n      // Use bitmasks to extract 6-bit segments from the triplet\r\n      a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\r\n      b = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12\r\n      c = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6\r\n      d = chunk & 63               // 63       = 2^6 - 1\r\n  \r\n      // Convert the raw binary segments to the appropriate ASCII encoding\r\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\r\n    }\r\n  \r\n    // Deal with the remaining bytes and padding\r\n    if (byteRemainder === 1) {\r\n      chunk = bytes[mainLength]\r\n  \r\n      a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\r\n  \r\n      // Set the 4 least significant bits to zero\r\n      b = (chunk & 3)   << 4 // 3   = 2^2 - 1\r\n  \r\n      base64 += encodings[a] + encodings[b] + '=='\r\n    } else if (byteRemainder === 2) {\r\n      chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\r\n  \r\n      a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\r\n      b = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4\r\n  \r\n      // Set the 2 least significant bits to zero\r\n      c = (chunk & 15)    <<  2 // 15    = 2^4 - 1\r\n  \r\n      base64 += encodings[a] + encodings[b] + encodings[c] + '='\r\n    }\r\n    \r\n    return base64\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}